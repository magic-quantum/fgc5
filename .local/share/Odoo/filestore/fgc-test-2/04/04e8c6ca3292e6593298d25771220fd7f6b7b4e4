)]}'
{"version": 3, "sources": ["/point_of_sale/static/src/entry/chrome_adapter.js", "/point_of_sale/static/src/entry/main.js", "/web/static/src/start.js", "/web/static/src/legacy/legacy_setup.js"], "mappings": "AAAA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClFA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpCA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5EA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["/** @odoo-module */\n\nimport { useService } from \"@web/core/utils/hooks\";\n\nimport Chrome from \"point_of_sale.Chrome\";\nimport ProductScreen from \"point_of_sale.ProductScreen\";\nimport Registries from \"point_of_sale.Registries\";\nimport { PosGlobalState } from \"point_of_sale.models\";\nimport { configureGui } from \"point_of_sale.Gui\";\nimport { registry } from \"@web/core/registry\";\nimport env from \"point_of_sale.env\";\nimport { debounce } from \"@web/core/utils/timing\";\nimport { batched } from \"point_of_sale.utils\";\n\nconst { Component, reactive, markRaw, useExternalListener, useSubEnv, onWillUnmount, xml } = owl;\n\nexport class ChromeAdapter extends Component {\n    setup() {\n        this.PosChrome = Registries.Component.get(Chrome);\n        ProductScreen.sortControlButtons();\n        const legacyActionManager = useService(\"legacy_action_manager\");\n\n        // Instantiate PosGlobalState here to ensure that every extension\n        // (or class overloads) is taken into consideration.\n        const pos = PosGlobalState.create({ env: markRaw(env) });\n\n        this.batchedCustomerDisplayRender = batched(() => {\n            reactivePos.send_current_order_to_customer_facing_display();\n        });\n        const reactivePos = reactive(pos, this.batchedCustomerDisplayRender);\n        env.pos = reactivePos;\n        env.legacyActionManager = legacyActionManager;\n\n        // The proxy requires the instance of PosGlobalState to function properly.\n        env.proxy.set_pos(reactivePos);\n\n        // TODO: Should we continue on exposing posmodel as global variable?\n        // Expose only the reactive version of `pos` when in debug mode.\n        window.posmodel = pos.debug ? reactivePos : pos;\n\n        this.env = env;\n        this.__owl__.childEnv = env;\n        useSubEnv({\n            get isMobile() {\n                return window.innerWidth <= 768;\n            },\n        });\n        let currentIsMobile = this.env.isMobile;\n        const updateUI = debounce(() => {\n            if (this.env.isMobile !== currentIsMobile) {\n                currentIsMobile = this.env.isMobile;\n                this.render(true);\n            }\n        }, 15);\n        useExternalListener(window, \"resize\", updateUI);\n        onWillUnmount(updateUI.cancel);\n    }\n\n    async configureAndStart(chrome) {\n        // Add the pos error handler when the chrome component is available.\n        registry.category('error_handlers').add(\n            'posErrorHandler',\n            (env, ...noEnvArgs) => {\n                if (chrome) {\n                    return chrome.errorHandler(this.env, ...noEnvArgs);\n                }\n                return false;\n            },\n            { sequence: 0 }\n        );\n        // Little trick to avoid displaying the block ui during the POS models loading\n        const BlockUiFromRegistry = registry.category(\"main_components\").get(\"BlockUI\");\n        registry.category(\"main_components\").remove(\"BlockUI\");\n        configureGui({ component: chrome });\n        await chrome.start();\n        registry.category(\"main_components\").add(\"BlockUI\", BlockUiFromRegistry);\n\n        // Subscribe to the changes in the models.\n        this.batchedCustomerDisplayRender();\n    }\n}\nChromeAdapter.template = xml`<t t-component=\"PosChrome\" setupIsDone.bind=\"configureAndStart\"/>`;\n", "/** @odoo-module */\n\nimport { startWebClient } from \"@web/start\";\n\nimport { ChromeAdapter } from \"@point_of_sale/entry/chrome_adapter\";\nimport Registries from \"point_of_sale.Registries\";\nimport { registry } from \"@web/core/registry\";\n\nconst { Component, xml } = owl;\n\n// For consistency's sake, we should trigger\"WEB_CLIENT_READY\" on the bus when PosApp is mounted\n// But we can't since mail and some other poll react on that cue, and we don't want those services started\nclass PosApp extends Component {\n    setup() {\n        this.Components = registry.category(\"main_components\").getEntries();\n    }\n}\nPosApp.template = xml`\n  <body>\n    <ChromeAdapter />\n    <div>\n      <t t-foreach=\"Components\" t-as=\"C\" t-key=\"C[0]\">\n        <t t-component=\"C[1].Component\" t-props=\"C[1].props\"/>\n      </t>\n    </div>\n  </body>\n`;\nPosApp.components = { ChromeAdapter };\n\nfunction startPosApp() {\n    Registries.Component.freeze();\n    Registries.Model.freeze();\n    startWebClient(PosApp);\n}\n\nstartPosApp();\n", "/** @odoo-module **/\n\nimport { makeEnv, startServices } from \"./env\";\nimport { legacySetupProm } from \"./legacy/legacy_setup\";\nimport { mapLegacyEnvToWowlEnv } from \"./legacy/utils\";\nimport { localization } from \"@web/core/l10n/localization\";\nimport { session } from \"@web/session\";\nimport { renderToString } from \"./core/utils/render\";\nimport { setLoadXmlDefaultApp, templates } from \"@web/core/assets\";\nimport { hasTouch } from \"@web/core/browser/feature_detection\";\n\nimport { App, whenReady } from \"@odoo/owl\";\n\n/**\n * Function to start a webclient.\n * It is used both in community and enterprise in main.js.\n * It's meant to be webclient flexible so we can have a subclass of\n * webclient in enterprise with added features.\n *\n * @param {Component} Webclient\n */\nexport async function startWebClient(Webclient) {\n    odoo.info = {\n        db: session.db,\n        server_version: session.server_version,\n        server_version_info: session.server_version_info,\n        isEnterprise: session.server_version_info.slice(-1)[0] === \"e\",\n    };\n    odoo.isReady = false;\n\n    // setup environment\n    const env = makeEnv();\n    await startServices(env);\n\n    // start web client\n    await whenReady();\n    const legacyEnv = await legacySetupProm;\n    mapLegacyEnvToWowlEnv(legacyEnv, env);\n    const app = new App(Webclient, {\n        env,\n        templates,\n        dev: env.debug,\n        translatableAttributes: [\"data-tooltip\"],\n        translateFn: env._t,\n    });\n    renderToString.app = app;\n    setLoadXmlDefaultApp(app);\n    const root = await app.mount(document.body);\n    const classList = document.body.classList;\n    if (localization.direction === \"rtl\") {\n        classList.add(\"o_rtl\");\n    }\n    if (env.services.user.userId === 1) {\n        classList.add(\"o_is_superuser\");\n    }\n    if (env.debug) {\n        classList.add(\"o_debug\");\n    }\n    if (hasTouch()) {\n        classList.add(\"o_touch_device\");\n    }\n    // delete odoo.debug; // FIXME: some legacy code rely on this\n    odoo.__WOWL_DEBUG__ = { root };\n    odoo.isReady = true;\n\n    // Update Favicons\n    const favicon = `/web/image/res.company/${env.services.company.currentCompany.id}/favicon`;\n    const icons = document.querySelectorAll(\"link[rel*='icon']\");\n    const msIcon = document.querySelector(\"meta[name='msapplication-TileImage']\");\n    for (const icon of icons) {\n        icon.href = favicon;\n    }\n    if (msIcon) {\n        msIcon.content = favicon;\n    }\n}\n", "/** @odoo-module alias=web.legacySetup **/\n\nimport { registry } from \"../core/registry\";\nimport {\n    makeLegacyNotificationService,\n    makeLegacyRpcService,\n    makeLegacySessionService,\n    makeLegacyDialogMappingService,\n    makeLegacyCrashManagerService,\n    makeLegacyCommandService,\n    makeLegacyDropdownService,\n} from \"./utils\";\nimport { makeLegacyActionManagerService } from \"./backend_utils\";\nimport * as AbstractService from \"web.AbstractService\";\nimport legacyEnv from \"web.env\";\nimport * as session from \"web.session\";\nimport * as makeLegacyWebClientService from \"web.pseudo_web_client\";\nimport { templates } from \"@web/core/assets\";\n\nimport { Component, whenReady } from \"@odoo/owl\";\n\nlet legacySetupResolver;\nexport const legacySetupProm = new Promise((resolve) => {\n    legacySetupResolver = resolve;\n});\n\n// build the legacy env and set it on Component (this was done in main.js,\n// with the starting of the webclient)\n(async () => {\n    AbstractService.prototype.deployServices(legacyEnv);\n    Component.env = legacyEnv;\n    const legacyActionManagerService = makeLegacyActionManagerService(legacyEnv);\n    const serviceRegistry = registry.category(\"services\");\n    serviceRegistry.add(\"legacy_action_manager\", legacyActionManagerService);\n    // add a service to redirect rpc events triggered on the bus in the\n    // legacy env on the bus in the wowl env\n    const legacyRpcService = makeLegacyRpcService(legacyEnv);\n    serviceRegistry.add(\"legacy_rpc\", legacyRpcService);\n    const legacySessionService = makeLegacySessionService(legacyEnv, session);\n    serviceRegistry.add(\"legacy_session\", legacySessionService);\n    const legacyWebClientService = makeLegacyWebClientService(legacyEnv);\n    serviceRegistry.add(\"legacy_web_client\", legacyWebClientService);\n    serviceRegistry.add(\"legacy_notification\", makeLegacyNotificationService(legacyEnv));\n    serviceRegistry.add(\"legacy_crash_manager\", makeLegacyCrashManagerService(legacyEnv));\n    const legacyDialogMappingService = makeLegacyDialogMappingService(legacyEnv);\n    serviceRegistry.add(\"legacy_dialog_mapping\", legacyDialogMappingService);\n    const legacyCommandService = makeLegacyCommandService(legacyEnv);\n    serviceRegistry.add(\"legacy_command\", legacyCommandService);\n    serviceRegistry.add(\"legacy_dropdown\", makeLegacyDropdownService(legacyEnv));\n    const wowlToLegacyServiceMappers = registry.category(\"wowlToLegacyServiceMappers\").getEntries();\n    for (const [legacyServiceName, wowlToLegacyServiceMapper] of wowlToLegacyServiceMappers) {\n        serviceRegistry.add(legacyServiceName, wowlToLegacyServiceMapper(legacyEnv));\n    }\n    await Promise.all([whenReady(), session.is_bound]);\n    legacyEnv.templates = templates;\n    legacySetupResolver(legacyEnv);\n})();\n"], "file": "/web/assets/1314-06fa4f7/point_of_sale.assets_backend_prod_only.js", "sourceRoot": "../../../"}