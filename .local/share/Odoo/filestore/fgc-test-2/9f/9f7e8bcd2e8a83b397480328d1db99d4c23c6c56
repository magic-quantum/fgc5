
/****************************************************************
*  Filepath: /point_of_sale/static/src/entry/chrome_adapter.js  *
*  Lines: 88                                                    *
****************************************************************/
odoo.define('@point_of_sale/entry/chrome_adapter', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { useService } = require("@web/core/utils/hooks");

const Chrome = require("point_of_sale.Chrome");
const ProductScreen = require("point_of_sale.ProductScreen");
const Registries = require("point_of_sale.Registries");
const { PosGlobalState } = require("point_of_sale.models");
const { configureGui } = require("point_of_sale.Gui");
const { registry } = require("@web/core/registry");
const env = require("point_of_sale.env");
const { debounce } = require("@web/core/utils/timing");
const { batched } = require("point_of_sale.utils");

const { Component, reactive, markRaw, useExternalListener, useSubEnv, onWillUnmount, xml } = owl;

const ChromeAdapter = __exports.ChromeAdapter = class ChromeAdapter extends Component {
    setup() {
        this.PosChrome = Registries.Component.get(Chrome);
        ProductScreen.sortControlButtons();
        const legacyActionManager = useService("legacy_action_manager");

        // Instantiate PosGlobalState here to ensure that every extension
        // (or class overloads) is taken into consideration.
        const pos = PosGlobalState.create({ env: markRaw(env) });

        this.batchedCustomerDisplayRender = batched(() => {
            reactivePos.send_current_order_to_customer_facing_display();
        });
        const reactivePos = reactive(pos, this.batchedCustomerDisplayRender);
        env.pos = reactivePos;
        env.legacyActionManager = legacyActionManager;

        // The proxy requires the instance of PosGlobalState to function properly.
        env.proxy.set_pos(reactivePos);

        // TODO: Should we continue on exposing posmodel as global variable?
        // Expose only the reactive version of `pos` when in debug mode.
        window.posmodel = pos.debug ? reactivePos : pos;

        this.env = env;
        this.__owl__.childEnv = env;
        useSubEnv({
            get isMobile() {
                return window.innerWidth <= 768;
            },
        });
        let currentIsMobile = this.env.isMobile;
        const updateUI = debounce(() => {
            if (this.env.isMobile !== currentIsMobile) {
                currentIsMobile = this.env.isMobile;
                this.render(true);
            }
        }, 15);
        useExternalListener(window, "resize", updateUI);
        onWillUnmount(updateUI.cancel);
    }

    async configureAndStart(chrome) {
        // Add the pos error handler when the chrome component is available.
        registry.category('error_handlers').add(
            'posErrorHandler',
            (env, ...noEnvArgs) => {
                if (chrome) {
                    return chrome.errorHandler(this.env, ...noEnvArgs);
                }
                return false;
            },
            { sequence: 0 }
        );
        // Little trick to avoid displaying the block ui during the POS models loading
        const BlockUiFromRegistry = registry.category("main_components").get("BlockUI");
        registry.category("main_components").remove("BlockUI");
        configureGui({ component: chrome });
        await chrome.start();
        registry.category("main_components").add("BlockUI", BlockUiFromRegistry);

        // Subscribe to the changes in the models.
        this.batchedCustomerDisplayRender();
    }
}
ChromeAdapter.template = xml`<t t-component="PosChrome" setupIsDone.bind="configureAndStart"/>`;

return __exports;
});
;

/******************************************************
*  Filepath: /point_of_sale/static/src/entry/main.js  *
*  Lines: 42                                          *
******************************************************/
odoo.define('@point_of_sale/entry/main', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { startWebClient } = require("@web/start");

const { ChromeAdapter } = require("@point_of_sale/entry/chrome_adapter");
const Registries = require("point_of_sale.Registries");
const { registry } = require("@web/core/registry");

const { Component, xml } = owl;

// For consistency's sake, we should trigger"WEB_CLIENT_READY" on the bus when PosApp is mounted
// But we can't since mail and some other poll react on that cue, and we don't want those services started
class PosApp extends Component {
    setup() {
        this.Components = registry.category("main_components").getEntries();
    }
}
PosApp.template = xml`
  <body>
    <ChromeAdapter />
    <div>
      <t t-foreach="Components" t-as="C" t-key="C[0]">
        <t t-component="C[1].Component" t-props="C[1].props"/>
      </t>
    </div>
  </body>
`;
PosApp.components = { ChromeAdapter };

function startPosApp() {
    Registries.Component.freeze();
    Registries.Model.freeze();
    startWebClient(PosApp);
}

startPosApp();

return __exports;
});
;

/***************************************
*  Filepath: /web/static/src/start.js  *
*  Lines: 82                           *
***************************************/
odoo.define('@web/start', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { makeEnv, startServices } = require("@web/env");
const { legacySetupProm } = require("@web/legacy/legacy_setup");
const { mapLegacyEnvToWowlEnv } = require("@web/legacy/utils");
const { localization } = require("@web/core/l10n/localization");
const { session } = require("@web/session");
const { renderToString } = require("@web/core/utils/render");
const { setLoadXmlDefaultApp, templates } = require("@web/core/assets");
const { hasTouch } = require("@web/core/browser/feature_detection");

const { App, whenReady } = require("@odoo/owl");

/**
 * Function to start a webclient.
 * It is used both in community and enterprise in main.js.
 * It's meant to be webclient flexible so we can have a subclass of
 * webclient in enterprise with added features.
 *
 * @param {Component} Webclient
 */
__exports.startWebClient = startWebClient; async function startWebClient(Webclient) {
    odoo.info = {
        db: session.db,
        server_version: session.server_version,
        server_version_info: session.server_version_info,
        isEnterprise: session.server_version_info.slice(-1)[0] === "e",
    };
    odoo.isReady = false;

    // setup environment
    const env = makeEnv();
    await startServices(env);

    // start web client
    await whenReady();
    const legacyEnv = await legacySetupProm;
    mapLegacyEnvToWowlEnv(legacyEnv, env);
    const app = new App(Webclient, {
        env,
        templates,
        dev: env.debug,
        translatableAttributes: ["data-tooltip"],
        translateFn: env._t,
    });
    renderToString.app = app;
    setLoadXmlDefaultApp(app);
    const root = await app.mount(document.body);
    const classList = document.body.classList;
    if (localization.direction === "rtl") {
        classList.add("o_rtl");
    }
    if (env.services.user.userId === 1) {
        classList.add("o_is_superuser");
    }
    if (env.debug) {
        classList.add("o_debug");
    }
    if (hasTouch()) {
        classList.add("o_touch_device");
    }
    // delete odoo.debug; // FIXME: some legacy code rely on this
    odoo.__WOWL_DEBUG__ = { root };
    odoo.isReady = true;

    // Update Favicons
    const favicon = `/web/image/res.company/${env.services.company.currentCompany.id}/favicon`;
    const icons = document.querySelectorAll("link[rel*='icon']");
    const msIcon = document.querySelector("meta[name='msapplication-TileImage']");
    for (const icon of icons) {
        icon.href = favicon;
    }
    if (msIcon) {
        msIcon.content = favicon;
    }
}

return __exports;
});
;

/*****************************************************
*  Filepath: /web/static/src/legacy/legacy_setup.js  *
*  Lines: 67                                         *
*****************************************************/
odoo.define('@web/legacy/legacy_setup', async function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=web.legacySetup **/

const { registry } = require("@web/core/registry");
const {
    makeLegacyNotificationService,
    makeLegacyRpcService,
    makeLegacySessionService,
    makeLegacyDialogMappingService,
    makeLegacyCrashManagerService,
    makeLegacyCommandService,
    makeLegacyDropdownService,
} = require("@web/legacy/utils");
const { makeLegacyActionManagerService } = require("@web/legacy/backend_utils");
const AbstractService = require("web.AbstractService");
const legacyEnv = require("web.env");
const session = require("web.session");
const makeLegacyWebClientService = require("web.pseudo_web_client");
const { templates } = require("@web/core/assets");

const { Component, whenReady } = require("@odoo/owl");

let legacySetupResolver;
const legacySetupProm = __exports.legacySetupProm = new Promise((resolve) => {
    legacySetupResolver = resolve;
});

// build the legacy env and set it on Component (this was done in main.js,
// with the starting of the webclient)
(async () => {
    AbstractService.prototype.deployServices(legacyEnv);
    Component.env = legacyEnv;
    const legacyActionManagerService = makeLegacyActionManagerService(legacyEnv);
    const serviceRegistry = registry.category("services");
    serviceRegistry.add("legacy_action_manager", legacyActionManagerService);
    // add a service to redirect rpc events triggered on the bus in the
    // legacy env on the bus in the wowl env
    const legacyRpcService = makeLegacyRpcService(legacyEnv);
    serviceRegistry.add("legacy_rpc", legacyRpcService);
    const legacySessionService = makeLegacySessionService(legacyEnv, session);
    serviceRegistry.add("legacy_session", legacySessionService);
    const legacyWebClientService = makeLegacyWebClientService(legacyEnv);
    serviceRegistry.add("legacy_web_client", legacyWebClientService);
    serviceRegistry.add("legacy_notification", makeLegacyNotificationService(legacyEnv));
    serviceRegistry.add("legacy_crash_manager", makeLegacyCrashManagerService(legacyEnv));
    const legacyDialogMappingService = makeLegacyDialogMappingService(legacyEnv);
    serviceRegistry.add("legacy_dialog_mapping", legacyDialogMappingService);
    const legacyCommandService = makeLegacyCommandService(legacyEnv);
    serviceRegistry.add("legacy_command", legacyCommandService);
    serviceRegistry.add("legacy_dropdown", makeLegacyDropdownService(legacyEnv));
    const wowlToLegacyServiceMappers = registry.category("wowlToLegacyServiceMappers").getEntries();
    for (const [legacyServiceName, wowlToLegacyServiceMapper] of wowlToLegacyServiceMappers) {
        serviceRegistry.add(legacyServiceName, wowlToLegacyServiceMapper(legacyEnv));
    }
    await Promise.all([whenReady(), session.is_bound]);
    legacyEnv.templates = templates;
    legacySetupResolver(legacyEnv);
})();

return __exports;
});

odoo.define(`web.legacySetup`, async function(require) {
                        return require('@web/legacy/legacy_setup')[Symbol.for("default")];
                        });


//# sourceMappingURL=/web/assets/1313-06fa4f7/point_of_sale.assets_backend_prod_only.js.map